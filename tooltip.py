import csv
import os
import xml.etree.ElementTree as ET
import textwrap


# Get metadata csv and read by line and put column in list
def get_metadata(inputfile):
    metadata = {}
    with open(inputfile) as file:
        reader = csv.DictReader(file, delimiter=',')
        for line in reader:
            metadata['[' + line['field'] + ']'] = [line['description'], line['additional details']]

    return metadata


# Function modifies the metadata dictionary by replacing any empty additional details with the text "Additional data not available"
def removeNone_WithaddtionalDetails_description(metadata):
    text = 'Additional data not available'
    text_desc = 'Description is not available'
    for value in metadata.values():
        if value[1] == '':
            value[1] = text
        if value[0] == '':
            value[0] = text_desc

    return metadata.values


##This function takes a filename as input, opens the file and reads its contents as XML using the ElementTree module. It then returns the root element of the XML document.
def read_XML(filename):
    with open(filename) as source:
        tree = ET.parse(source)
        return tree.getroot()


# This function reads the XML tree. Create list of dictionaries and returns containing the column metadata.
def create_column_list(root):
    column_list = []
    for data in root.find('./connection/metadata-records'):
        for record in data.iter('metadata-record'):
            # name = ''
            # dataType = ''
            for subElement in record.iter():
                if (subElement.tag == 'local-name'):
                    name = subElement.text
                if (subElement.tag == 'local-type'):
                    dataType = subElement.text
                    if dataType == 'string':
                        type = 'nominal'
                        role = 'dimension'
                    else:
                        type = 'quantitative'
                        role = 'measure'
                    # if(name!='' and dataType!=''):
                    column = {}
                    column['name'] = name
                    column['datatype'] = dataType
                    column['role'] = role
                    column['type'] = type
                    column_list.append(column)
                    # name = dataType = ''
    return column_list


# This function adds new column elements to the XML tree using the list of dictionaries generated by create_column_list.
def add_columns_to_xml(root, column_list):
    element = root.findall('column')
    for item in column_list:
        new_element = ET.Element("column", item)
        new_element_index = list(root).index(root.find('column'))
        root.insert(new_element_index, new_element)
        element.append(new_element)


# This function updates the metadata for each column in the XML tree using the metadata dictionary.
def format_column_metadata(root, metadata, width=80):
    title_for_description = 'Description'
    title1_for_Additional_notes = 'Additional notes'
    # Remove Duplicate column names
    column_names = set()
    for column in root.findall('./column'):
        # print(column.attrib)
        caption = column.get("caption")
        column_name = column.get("name")
        # print(column_name)
        column_role = column.get("role")
        column_type = column.get("type")
        # print(column_type)
        if column_name in column_names:
            root.remove(column)
            continue
        else:
            column_names.add(column_name)

        if caption is not None:
            column_caption = [caption]
            column_caption = ("[{0}]".format(', '.join(column_caption)))
            column_name = column_caption

        # Format xml and add metadata
        desc = column.find('desc')
        if desc is not None:
            column.remove(desc)
        desc = ET.SubElement(column, "desc")
        formatted_text = ET.SubElement(desc, "formatted-text")
        if column_role == 'dimension':
            column_role = 'Dimension'
            run = ET.SubElement(formatted_text, "run", bold='true', fontcolor='#178da4', fontsize='14')
            run.text = column_role + '\n\n'
        if column_role == 'measure':
            column_role = 'Measure'
            run = ET.SubElement(formatted_text, "run", bold='true', fontcolor='#34a434', fontsize='14')
            run.text = column_role + '\n\n'
        run = ET.SubElement(formatted_text, "run", bold='true')
        run.text = title_for_description + '\n'
        # Check if metadata exists for the column, and set default values if it doesn't
        if column_name in metadata:
            desc_text = metadata[column_name][0] or ""
            addtional_text = metadata[column_name][1] or ""
        else:
            desc_text = ""
            addtional_text = ""

        # Use the textwrap module to wrap the column description and additional details text to a maximum width of 80 characters
        wrapped_desc_text = '\n'.join(textwrap.wrap(desc_text, width=width))
        run = ET.SubElement(formatted_text, "run")
        run.text = wrapped_desc_text + '\n\n'
        run = ET.SubElement(formatted_text, "run", bold='true', italic='true')
        run.text = title1_for_Additional_notes + '\n'
        wrapped_addtional_text = '\n'.join(textwrap.wrap(addtional_text, width=width))
        run = ET.SubElement(formatted_text, "run")
        run.text = wrapped_addtional_text + '\n\n'

    return root


# This function takes the root element of an XML document and a file name as input, and writes the XML document to a file using the ElementTree module.
def write_XML(root, write_data):
    tree = ET.ElementTree(root)
    tree.write(write_data)


# This is the main function that formats the XML file.It calls the above functions to read the input file, add new columns,and update column
def format_XML(filename, write_data, metadata):
    root = read_XML(filename)
    column_list = create_column_list(root)
    add_columns_to_xml(root, column_list)
    formatted_root = format_column_metadata(root, metadata)
    write_XML(formatted_root, write_data)


# This function combine the all functions in the script.To print the content of this script use main.py. To see the name of Input file, source file and write file check main.py
def add_tooltips(input_file, source_file, xml_file):
    metadata = get_metadata(input_file)
    removeNone_WithaddtionalDetails_description(metadata)
    format_XML(source_file, xml_file, metadata)